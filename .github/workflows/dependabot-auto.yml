name: Dependabot Auto-Merge

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  check_suite:
    types: [completed]
  workflow_run:
    workflows: ["Web App Test", "Docker CI"]
    types: [completed]
  # Manual trigger added
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to auto-merge (optional - will process all open Dependabot PRs if not specified)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto_merge_dependabot:
    runs-on: ubuntu-latest
    if: >
      github.actor == 'dependabot[bot]' || 
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR number for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        id: get_pr
        env:
          INPUT_PR_NUMBER: ${{ inputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$INPUT_PR_NUMBER" ]; then
            echo "pr_number=$INPUT_PR_NUMBER" >> $GITHUB_OUTPUT
          else
            # Get all open Dependabot PRs
            pr_numbers=$(gh pr list --author "dependabot[bot]" --state open --json number --jq '.[].number' | head -1)
            echo "pr_number=$pr_numbers" >> $GITHUB_OUTPUT
          fi

      - name: Set PR number for regular events
        if: github.event_name != 'workflow_dispatch'
        id: set_pr
        env:
          EVENT_PR_NUMBER: ${{ github.event.pull_request.number }}
          WORKFLOW_PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
        run: |
          PR_NUM="${EVENT_PR_NUMBER:-$WORKFLOW_PR_NUMBER}"
          echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT

      - name: Get PR details
        id: pr_details
        env:
          PR_NUMBER_FROM_GET: ${{ steps.get_pr.outputs.pr_number }}
          PR_NUMBER_FROM_SET: ${{ steps.set_pr.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUM="${PR_NUMBER_FROM_GET:-$PR_NUMBER_FROM_SET}"
          if [ -z "$PR_NUM" ]; then
            echo "No PR number found, exiting"
            exit 1
          fi
          
          # Validate PR number is numeric
          if ! [[ "$PR_NUM" =~ ^[0-9]+$ ]]; then
            echo "Invalid PR number: $PR_NUM"
            exit 1
          fi
          
          PR_INFO=$(gh pr view "$PR_NUM" --json author,mergeable,statusCheckRollupState,url,title)
          echo "pr_info=$PR_INFO" >> $GITHUB_OUTPUT
          
          # Extract individual fields safely
          PR_URL=$(echo "$PR_INFO" | jq -r '.url')
          PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.author.login')
          PR_MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
          PR_STATUS=$(echo "$PR_INFO" | jq -r '.statusCheckRollupState')
          PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
          
          # Validate PR URL format
          if ! [[ "$PR_URL" =~ ^https://github\.com/.+/pull/[0-9]+$ ]]; then
            echo "Invalid PR URL format: $PR_URL"
            exit 1
          fi
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "pr_mergeable=$PR_MERGEABLE" >> $GITHUB_OUTPUT
          echo "pr_status=$PR_STATUS" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT

      - name: Fetch Dependabot Metadata
        if: steps.pr_details.outputs.pr_author == 'dependabot[bot]'
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check if PR is ready to merge
        id: check_ready
        env:
          PR_AUTHOR: ${{ steps.pr_details.outputs.pr_author }}
          PR_MERGEABLE: ${{ steps.pr_details.outputs.pr_mergeable }}
          PR_STATUS: ${{ steps.pr_details.outputs.pr_status }}
        run: |
          if [ "$PR_AUTHOR" != "dependabot[bot]" ]; then
            echo "Not a Dependabot PR, skipping (author: $PR_AUTHOR)"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ "$PR_MERGEABLE" != "MERGEABLE" ]; then
            echo "PR is not mergeable, skipping (status: $PR_MERGEABLE)"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ "$PR_STATUS" != "SUCCESS" ]; then
            echo "PR status checks are not passing, skipping (status: $PR_STATUS)"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "PR is ready to merge"
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: Wait for checks to complete
        if: steps.check_ready.outputs.ready == 'true'
        env:
          PR_NUMBER_FROM_GET: ${{ steps.get_pr.outputs.pr_number }}
          PR_NUMBER_FROM_SET: ${{ steps.set_pr.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for final check completion..."
          sleep 30
          
          # Re-check status
          PR_NUM="${PR_NUMBER_FROM_GET:-$PR_NUMBER_FROM_SET}"
          FINAL_STATUS=$(gh pr view "$PR_NUM" --json statusCheckRollupState --jq '.statusCheckRollupState')
          
          if [ "$FINAL_STATUS" != "SUCCESS" ]; then
            echo "Final status check failed: $FINAL_STATUS"
            exit 1
          fi

      - name: Enable Auto-Merge
        if: steps.check_ready.outputs.ready == 'true'
        env:
          PR_URL: ${{ steps.pr_details.outputs.pr_url }}
          PR_TITLE: ${{ steps.pr_details.outputs.pr_title }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Additional URL validation
          if ! [[ "$PR_URL" =~ ^https://github\.com/.+/pull/[0-9]+$ ]]; then
            echo "Invalid PR URL: $PR_URL"
            exit 1
          fi
          
          echo "Attempting to auto-merge PR: $PR_URL"
          echo "PR Title: $PR_TITLE"
          
          # Try to enable auto-merge first, fallback to direct merge
          if ! gh pr merge --auto --squash "$PR_URL"; then
            echo "Auto-merge failed, trying direct merge..."
            gh pr merge --squash "$PR_URL"
          fi

      - name: Verify merge completion
        if: steps.check_ready.outputs.ready == 'true'
        env:
          PR_NUMBER_FROM_GET: ${{ steps.get_pr.outputs.pr_number }}
          PR_NUMBER_FROM_SET: ${{ steps.set_pr.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUM="${PR_NUMBER_FROM_GET:-$PR_NUMBER_FROM_SET}"
          sleep 10
          
          # Check if PR was successfully merged
          PR_STATE=$(gh pr view "$PR_NUM" --json state --jq '.state')
          if [ "$PR_STATE" = "MERGED" ]; then
            echo "✅ PR successfully merged!"
          else
            echo "⚠️ PR merge status unclear, current state: $PR_STATE"
          fi

      - name: Auto-merge fallback
        if: failure() && steps.check_ready.outputs.ready == 'true'
        uses: pascalgn/automerge-action@v0.16.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_METHOD: "squash"
          MERGE_RETRY_SLEEP: "30000" # 30 seconds
          MERGE_RETRIES: "5"
          MERGE_DELETE_BRANCH: "true"
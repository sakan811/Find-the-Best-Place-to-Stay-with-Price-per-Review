name: Binary Tests

on:
  push:
    paths:
      - 'web-app-exe/**'
    branches: [ main ]
  pull_request:
    paths:
      - 'web-app-exe/**'
    branches: [ main ]

jobs:
  test-binaries:
    name: Test Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            binary: find-place-web-app_windows_amd64.exe
          - os: macos-latest
            binary: find-place-web-app_darwin_amd64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      working-directory: ./web-app-exe
      run: go mod download

    - name: Run Go tests
      working-directory: ./web-app-exe
      run: go test -v ./tests/...

    - name: Build binaries
      working-directory: ./web-app-exe
      run: |
        chmod +x build-exe.sh
        ./build-exe.sh
      shell: bash

    - name: Test binary execution (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./web-app-exe
      run: |
        # Test if binary exists
        if (!(Test-Path "${{ matrix.binary }}")) {
          Write-Error "Binary not found"
          exit 1
        }
        
        # Create test environment file
        Copy-Item .env.example .env
        
        # Test version command
        Write-Host "Testing version command..."
        $process = Start-Process -FilePath ".\${{ matrix.binary }}" -ArgumentList "--version" -NoNewWindow -PassThru -Wait
        if ($process.ExitCode -ne 0) {
          Write-Error "Version command failed"
          exit 1
        }
        
        # Test help command
        Write-Host "Testing help command..."
        $process = Start-Process -FilePath ".\${{ matrix.binary }}" -ArgumentList "--help" -NoNewWindow -PassThru -Wait
        if ($process.ExitCode -ne 0) {
          Write-Error "Help command failed"
          exit 1
        }

    - name: Test binary execution (macOS)
      if: matrix.os == 'macos-latest'
      working-directory: ./web-app-exe
      run: |
        # Test if binary exists
        if [ ! -f "${{ matrix.binary }}" ]; then
          echo "Binary not found"
          exit 1
        fi
        
        # Make binary executable
        chmod +x "${{ matrix.binary }}"
        
        # Create test environment file
        cp .env.example .env
        
        # Test version command
        echo "Testing version command..."
        ./"${{ matrix.binary }}" --version
        
        # Test help command
        echo "Testing help command..."
        ./"${{ matrix.binary }}" --help

    - name: Debug binary info (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./web-app-exe
      run: |
        Write-Host "Binary details:"
        Get-Item "${{ matrix.binary }}" | Format-List *
        Write-Host "File hash:"
        Get-FileHash "${{ matrix.binary }}" | Format-List *

    - name: Debug binary info (macOS)
      if: matrix.os == 'macos-latest'
      working-directory: ./web-app-exe
      run: |
        echo "Binary details:"
        ls -l "${{ matrix.binary }}"
        echo "File type:"
        file "${{ matrix.binary }}"
        echo "File hash:"
        shasum -a 256 "${{ matrix.binary }}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os }}
        path: |
          web-app-exe/find-place-web-app_*
        retention-days: 5